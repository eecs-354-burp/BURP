#!/usr/bin/env python
##
# BURP
# The Better URL Reputation Platform
# Usage: burp [URL]
##

# System packages
import sys, os, tempfile, re
from subprocess import Popen, PIPE, STDOUT

# Contributed packages
import requests
import arff

# BURP packages
import burp
from burp.html import HTMLAnalyzer
from burp.url import URLAnalyzer

WEKA_MODEL = burp.getWekaFile('J48.model')
WEKA_TRAINING_SET = burp.getWekaFile('training_set.arff')

if not len(sys.argv) == 2:
  print("Usage: burp [URL]")
  exit(1)

##
# Extract Features
##

url = sys.argv[1]
analysis = {}

print("Retrieving web page ...")
try:
  r = requests.get(url)
except Exception as e:
  print('ERROR: Could not retrieve %s' % (url))
  exit(1)

print("Analyzing HTML ...")
try: # html analysis
  html = r.text
  htmlanalyzer = HTMLAnalyzer()
  htmlanalyzer.setUrl(url)
  htmlanalyzer.loadHtml(html)
  analysis = htmlanalyzer.analyze()
except Exception as e:
  print('ERROR: HTML Analysis, %s, %s\n' %(url, e))
  exit(1)
  
print("Analyzing URL ...")
url_analyzer = URLAnalyzer()
domain = ""
try: # tokenizer
  tokens = url_analyzer.getTokens(url)
  analysis.update(tokens)

  subdomain = tokens['subdomain']
  analysis['number_subdomains'] = subdomain.count('.') + 1
  analysis['subdomain_length'] = len(subdomain)

  domain = tokens['domain']
  analysis['domain_length'] = len(domain)
except Exception as e:
  print('ERROR: Tokenizer, %s, %s\n' % (url, str(e)))
  exit(1)

if domain == "":
  domain = url #hack

print("Analyzing HTTP headers ...")
analysis['cache_control'] = r.headers['Cache-Control']
analysis['expires'] = r.headers['Expires']
analysis['content_type'] = r.headers['Content-Type']
analysis['server'] = r.headers['Server']
analysis['transfer_encoding'] = r.headers['Transfer-Encoding']

ipAddress = url_analyzer.getIpAddr(domain)
analysis['ip_address'] = ipAddress

if ipAddress is not None:
  findFirstOctet = re.compile('^(\d+)')
  analysis['ip_address_a'] = findFirstOctet.search(ipAddress).group(1)

print("Analyzing WHOIS information ...")
whois = url_analyzer.getWhoIs(domain)
if whois is not None:
  for key, value in whois.items():
    analysis[key] = str(value)

##
# Export feature analysis to temporary ARFF file
##

arffData = dict(
  relation = 'test_set',
  attributes = [
    ('ISBAD', ['FALSE', 'TRUE']),
    ('HTML_NUMCHARACTERS', 'NUMERIC'),
    ('HTML_PERCENTSCRIPTCONTENT', 'NUMERIC'),
    ('HTML_PERCENTWHITESPACE', 'NUMERIC'),
    ('HTML_PERCENTUNOWNELEMENTS', 'NUMERIC'),
    ('HTML_NUMSCRIPTS', 'NUMERIC'),
    ('HTML_NUMSCRIPTSWRONGEXTENTION', 'NUMERIC'),
    ('HTML_NUMBERIFRAMES', 'NUMERIC'),
    ('HTML_NUMUNSAFEINCLUDEDURL', 'NUMERIC'),
    ('IP_ADDRESS_A', 'NUMERIC'),
    ('TOKEN_SUBDOMAIN_LENGTH', 'NUMERIC'),
    ('TOKEN_NUMBER_SUBDOMAINS', 'NUMERIC'),
    ('TOKEN_DOMAIN_LENGTH', 'NUMERIC')
  ],
  data = [[
    None, # ISBAD, the value to be predicted
    analysis['numCharacters'],
    analysis['percentScriptContent'],
    analysis['percentWhitespace'],
    analysis['percentUnknownElements'],
    analysis['numScripts'],
    analysis['numScriptsWithWrongExtension'],
    analysis['numIframes'],
    analysis['numUnsafeIncludedUrls'], 
    analysis['ip_address_a'],
    analysis['subdomain_length'],
    analysis['number_subdomains'],
    analysis['domain_length']
  ]]
)
wekaTestSet = tempfile.NamedTemporaryFile(suffix='.arff')
arff.dump(wekaTestSet, arffData)
# Return the file pointer to the beginning of the file for reading
wekaTestSet.seek(0)

##
# Invoke Weka to classify the URL
##

print("Making prediction ...")
p = Popen(['java',
  'weka.classifiers.misc.InputMappedClassifier',
  '-L', WEKA_MODEL,
  '-t', WEKA_TRAINING_SET,
  '-T', wekaTestSet.name,
  '-M', # Suppress the output of the mapping report
  '-classifications', 'weka.classifiers.evaluation.output.prediction.CSV'],
  stdout=PIPE,
  stderr=STDOUT)
output = p.communicate()[0]
lines = output.decode().splitlines()

if p.returncode != 0:
  # Print error messages and exit
  for line in lines:
    print(line)
  exit(p.returncode)

# The result is found in the 3rd column of the 6th line of Weka's CSV output.
# It has the format "X:BOOL", where X is an integer class index and BOOL is "TRUE" or "FALSE".
# (See http://weka.wikispaces.com/Making+predictions for more details)
# The line below extracts the BOOL substring.
result = lines[5].split(',')[2][2:]
if (result == 'TRUE'):
  classification = 'MALICIOUS'
else:
  classification = 'BENIGN'
print(url + ' is ' + classification)

# Delete the temporary ARFF file
wekaTestSet.close()

